--ch 2 book studing starting pg 72 Murach

select *
from Invoices;




-- The arithmetic operators in order of precedence "* / modulo (remainder)+-"


-- A SELECT statement that calculates the balance due

SeLECT InvoiceTotal, PaymentTotal, CreditTotal, InvoiceTotal - PaymentTotal - CreditTotal AS BalanceDue
FROM Invoices;


-- A SELECT statement that uses parentheses to control the sequence of operations

SELECT InvoiceID,InvoiceID + 7 * 3 AS OrderOfPrecedence, (InvoiceID + 7) * 3 AS AddFirstFROM Invoices ORDER BY InvoiceID;--A SELECT statement that uses the modulo operator SELECT InvoiceID,InvoiceID / 10 AS Quotient, InvoiceID % 10 AS RemainderFROM Invoices ORDER BY InvoiceID;-- Unless parentheses are used, the operations in an expression take place from left to right in the order of precedence.--A SELECT statement that uses the LEFT function SELECT VendorContactFName, VendorContactLName, LEFT(VendorContactFName, 1) + LEFT(VendorContactLName, 1) AS InitialsFROM Vendors;--A SELECT statement that uses the CONVERT function /* SELECT 'Invoice: #' + InvoiceNumber+ ', dated ' + CONVERT(char(8), PaymentDate, 1) + ' for $' + CONVERT(varchar(9), PaymentTotal, 1) FROM Invoices;*/--A SELECT statement that computes the age of an invoice SELECT InvoiceDate,GETDATE() AS 'Today''s Date',DATEDIFF(day, InvoiceDate, GETDATE()) AS Age FROM Invoices;--A SELECT statement that returns all rowsSELECT VendorCity, VendorState FROM VendorsORDER BY VendorCity;--A SELECT statement that eliminates duplicate rowsSELECT DISTINCT VendorCity, VendorState FROM Vendors;--- The DISTINCT keyword prevents duplicate (identical) rows from being included in the result set. --It also causes the result set to be sorted by its first column.--To use the DISTINCT or ALL keyword, code it immediately after the SELECT keyword--Top clause--A SELECT statement with a TOP clauseSELECT  TOP 5 VendorID, InvoiceTotal FROM InvoicesORDER BY InvoiceTotal DESC;

                                           -----Join

---The explicit syntax for an inner join---SELECT select_list FROM table_1---[INNER] JOIN table_2 ON join_condition_1 [[INNER] JOIN table_3 ON join_condition_2]...--A SELECT statement that joins the Vendors and Invoices tables    	 SELECT InvoiceNumber, VendorName FROM Vendors    JOIN Invoices 	ON  Vendors.VendorID = Invoices.VendorID  ;	---1. A join combines columns from two or more tables into a result set based on the join conditions you specify. 	--For an inner join, only those rows that satisfy the join condition are included in the result set.	--2.  In most cases, you’ll join two tables based on the relationship between the primary key in one table and a foreign key in the other table.	--    However, you can also join tables based on relationships not defined in the database. These are called ad hoc relationships.	--3.  If the two columns in a join condition have the same name, you have to qualify them with the table name so that SQL Server can distinguish between them.	--    To code a qualified column name, type the table name, followed by a period, followed by the column name.	--An inner join that uses table aliases 	SELECT InvoiceNumber, VendorName, InvoiceDueDate, InvoiceTotal - PaymentTotal - CreditTotal AS BalanceDue    FROM Vendors v    JOIN Invoices i    ON v.VendorID = i.VendorID    WHERE InvoiceTotal - PaymentTotal - CreditTotal > 0 ORDER BY InvoiceDueDate DESC;	--Description	--• Table aliases are temporary table names assigned in the FROM clause. You can use table aliases to make your queries shorter and easier to read. A table alias can also be called a correlation name.--  --• When you code a table alias, you can use the AS keyword like you do for a column alias. However, it’s a common practice to not use the AS keyword for table aliases.--    •   If you assign an alias to a table, you must use that name to refer to the table within your query. You can’t use the original table name.------• You can use a table alias for just one table or a few in a join without using table aliases for the other tables.------.• You should use table aliases wherever it makes your query easier to read, particu-larly if your table names are long or you are using a lot of qualified column names.---A join with fully-qualified table namesSELECT VendorName, CustLastName, CustFirstName, VendorState AS State, VendorCity AS CityFROM AP.dbo.Vendors v JOIN ProductOrders.dbo.Customers c ON v.VendorZipCode = c.CustZip--A join with partial-qualified table names       SELECT VendorName, CustLastName, CustFirstName, VendorState AS State, VendorCity AS City      FROM AP.dbo.Vendors v       JOIN ProductOrders.dbo.Customers c ON v.VendorZipCode = c.CustZipORDER BY State, City;--An inner join with two conditions     SELECT InvoiceNumber, InvoiceDate, InvoiceTotal, InvoiceLineItemAmount 	FROM Invoices i    JOIN InvoiceLineItems li      ON i.InvoiceID = li.InvoiceID AND i.InvoiceTotal > li.InvoiceLineItemAmountORDER BY InvoiceNumber;---The same join with the second condition coded in a WHERE clause     SELECT InvoiceNumber, InvoiceDate, InvoiceTotal, InvoiceLineItemAmount 	FROM Invoices i    JOIN InvoiceLineItems li 	ON i.InvoiceID = li.InvoiceIDWHERE i.InvoiceTotal > li.InvoiceLineItemAmount ORDER BY InvoiceNumber;---Self join--A self-join that returns vendors from cities in common with other vendors      SELECT DISTINCT v1.VendorName, v1.VendorCity, v1.VendorState      FROM Vendors v1 	 JOIN Vendors v2     ON v1.VendorCity = v2.VendorCity AND v1.VendorState = v2.VendorState AND v1.VendorID <> v2.VendorID    ORDER BY v1.VendorState, v1.VendorCity; 	--A SELECT statement that joins four tables	SELECT VendorName, InvoiceNumber, InvoiceDate, InvoiceLineItemAmount AS LineItemAmount, AccountDescription	FROM Vendors v    JOIN Invoices i    ON v.VendorID = i.VendorID 	JOIN InvoiceLineItems li    ON i.InvoiceID = li.InvoiceID 	JOIN GLAccounts gla    ON li.AccountNo = gla.AccountNo   WHERE InvoiceTotal - PaymentTotal - CreditTotal > 0 ORDER BY VendorName, LineItemAmount DESC;   ---implicit join  -- A SELECT statement that joins the Vendors and Invoices tables      SELECT InvoiceNumber, VendorName	  FROM Vendors v, Invoices i	  WHERE v.VendorID = i.VendorID;	  --A statement that joins four tables      SELECT VendorName, InvoiceNumber, InvoiceDate, InvoiceLineItemAmount AS LineItemAmount, AccountDescription 	  FROM Vendors AS v, Invoices AS i, InvoiceLineItems AS li, GLAccounts AS gla 	  WHERE v.VendorID = i.VendorID 	  AND	  i.InvoiceID = li.InvoiceID 	  AND	  li.AccountNo = gla.AccountNo     AND    InvoiceTotal - PaymentTotal - CreditTotal > 0 ORDER BY VendorName, LineItemAmount DESC;	--What outer joins do Join type	---A SELECT statement that uses a left outer join 	SELECT VendorName, InvoiceNumber, InvoiceTotal	FROM Vendors v    Left JOIN Invoices i	ON v.VendorID = i.VendorID 	ORDER BY VendorName;	--inner and outer	---A SELECT statement that uses a left outer join 	SELECT VendorName, InvoiceNumber, InvoiceTotal 	FROM Vendors v    LEFT JOIN Invoices i 	ON v.VendorID = i.VendorID ORDER BY VendorName;	--Exercises 